{"version":3,"sources":["webpack:///src/app/pages/treatments/treatments-routing.module.ts","webpack:///src/app/pages/treatments/treatments.module.ts","webpack:///src/app/pages/treatments/treatments.page.html","webpack:///src/app/pages/treatments/treatments.page.ts"],"names":["routes","path","component","TreatmentsPage","TreatmentsPageRoutingModule","RouterModule","TreatmentsPageModule","CommonModule","FormsModule","IonicModule","ComponentsModule","MatFormFieldModule","ReactiveFormsModule","MatInputModule","NAMES","IDENTIFIERS","route","displayedColumns","selectedTreatmentID","allTreatments","displayTreatments","search","FormControl","treatments","Array","from","length","_","k","createMockTreatments","id","name","Math","round","random","charAt","rowData","sno","identifier","floor","patient","push","dischargeDate","randomDate","Date","admissionDate","payType","notes","start","end","getTime","toLocaleDateString","searchStr","filter","treatment","includes","valueChanges","pipe","debounceTime","subscribe","value","filterTreatments","row"],"mappings":"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","file":"src_app_pages_treatments_treatments_module_ts-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { TreatmentsPage } from './treatments.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: TreatmentsPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class TreatmentsPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { TreatmentsPageRoutingModule } from './treatments-routing.module';\n\nimport { TreatmentsPage } from './treatments.page';\nimport { ComponentsModule } from '../../components/components.module';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    TreatmentsPageRoutingModule,\n    ComponentsModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    MatInputModule,\n  ],\n  declarations: [TreatmentsPage],\n})\nexport class TreatmentsPageModule {}\n","<ion-header>\n  <ion-toolbar>\n    <ion-buttons slot=\"start\">\n      <ion-menu-button color=\"light\">\n        <ion-menu-button color=\"dark\"></ion-menu-button>\n      </ion-menu-button>\n    </ion-buttons>\n    <ion-title>Treatments</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <ion-grid class=\"p-lg-5\">\n    <ion-row>\n      <ion-col class=\"ion-hide-md-down\" size=\"6\" *ngIf=\"treatments\">\n        <app-table [displayedColumns]=\"displayedColumns\" [treatments]=\"treatments\" (selectTreatment)=\"selectTreatment($event)\"></app-table>\n      </ion-col>\n      <ion-col class=\"ion-hide-sm-up\" size=\"12\"  *ngIf=\"treatments\">\n        <mat-form-field appearance=\"fill\" class=\"search-field\">\n          <mat-label>Search using patient's name or IPD </mat-label>\n          <input matInput [formControl]=\"search\">\n          <mat-hint>Searched value is matched anywhere within the string</mat-hint>\n        </mat-form-field>\n        <app-mobile-treatments-table [allTreatments]=\"displayTreatments\"></app-mobile-treatments-table>\n      </ion-col>\n      <ion-col class=\"ion-hide-md-down\" size=\"12\" size-md=\"6\" *ngIf=\"allTreatments\">\n        <div>\n          <app-treatment-details [treatment]=\"allTreatments[selectedTreatmentID - 1]\"></app-treatment-details>\n        </div>\n      </ion-col>\n    </ion-row>\n  </ion-grid>\n\n</ion-content>\n","import { AfterViewInit, Component, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { ITreatment } from '../../shared/interfaces/treatment';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { FormControl } from '@angular/forms';\nimport { debounceTime } from 'rxjs/operators';\n\n// for mocking data\nconst NAMES = [\n  'Harry',\n  'Ross',\n  'Bruce',\n  'Cook',\n  'Carolyn',\n  'Morgan',\n  'Albert',\n  'Walker',\n  'Randy',\n  'Reed',\n  'Larry',\n  'Barnes',\n  'Lois',\n  'Wilson',\n  'Jesse',\n  'Campbell',\n  'Ernest',\n  'Rogers',\n  'Theresa',\n  'Patterson',\n  'Henry',\n  'Simmons',\n  'Michelle',\n  'Perry',\n  'Frank',\n  'Butler',\n  'Shirley',\n];\nconst IDENTIFIERS = ['Chemo', 'Transplant', 'Routine'];\n\nexport interface TreatmentTableData {\n  sno: number;\n  id: string;\n  identifier: string;\n  patient: string;\n}\n\n@Component({\n  selector: 'app-treatments',\n  templateUrl: './treatments.page.html',\n  styleUrls: ['./treatments.page.scss'],\n})\nexport class TreatmentsPage implements OnInit {\n  displayedColumns: string[] = ['sno', 'identifier', 'id', 'patient'];\n  selectedTreatmentID = 1;\n  allTreatments: ITreatment[] = [];\n  displayTreatments: ITreatment[] = [];\n  treatments: TreatmentTableData[];\n  search = new FormControl(null);\n\n  constructor(private route: ActivatedRoute) {\n    this.treatments = Array.from({ length: 100 }, (_, k) => this.createMockTreatments(k + 1));\n    this.displayTreatments = this.allTreatments;\n  }\n\n  createMockTreatments(id: number): TreatmentTableData {\n    const name =\n      NAMES[Math.round(Math.random() * (NAMES.length - 1))] + ' ' + NAMES[Math.round(Math.random() * (NAMES.length - 1))].charAt(0) + '.';\n    const rowData = {\n      sno: id,\n      identifier: IDENTIFIERS[Math.floor(Math.random() * IDENTIFIERS.length)],\n      id: '' + Math.floor(Math.random() * (9999999 - 1000000 + 1)),\n      patient: name,\n    };\n    this.allTreatments.push({\n      id: rowData.id,\n      identifier: rowData.identifier,\n      patient: {\n        id: '' + id,\n        name: rowData.patient,\n      },\n      dischargeDate: this.randomDate(new Date(2021, 4, 1), new Date()),\n      admissionDate: this.randomDate(new Date(2021, 4, 1), new Date()),\n      payType: 'cash',\n      notes: 'Lorem Ipsum is simply dummy text of the printing and typesetting industry.',\n    });\n    return rowData;\n  }\n\n  randomDate(start, end) {\n    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())).toLocaleDateString();\n  }\n\n  filterTreatments(searchStr: string) {\n    this.displayTreatments = this.allTreatments.filter(\n      (treatment) => treatment.id.includes(searchStr) || treatment.patient.name.includes(searchStr)\n    );\n  }\n\n  ngOnInit() {\n    this.search.valueChanges.pipe(debounceTime(200)).subscribe((value) => this.filterTreatments(value));\n  }\n\n  selectTreatment(row: TreatmentTableData) {\n    this.selectedTreatmentID = row.sno;\n  }\n}\n"]}