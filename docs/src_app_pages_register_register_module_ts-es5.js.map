{"version":3,"sources":["webpack:///src/app/pages/register/register-routing.module.ts","webpack:///src/app/pages/register/register.module.ts","webpack:///src/app/pages/register/register.page.html","webpack:///src/app/pages/register/register.page.ts"],"names":["routes","path","component","RegisterPage","RegisterPageRoutingModule","RouterModule","RegisterPageModule","CommonModule","FormsModule","IonicModule","IonicStorageModule","MatCardModule","MatButtonModule","ReactiveFormsModule","MatFormFieldModule","MatInputModule","MatSelectModule","authService","router","storage","registerForm","FormGroup","name","FormControl","Validators","email","password","hospitals","speciality","specialities","set","get","value","valid","register","then","isRegistered","loginData","username","login","result","navigateByUrl"],"mappings":"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","file":"src_app_pages_register_register_module_ts-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { RegisterPage } from './register.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RegisterPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class RegisterPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { RegisterPageRoutingModule } from './register-routing.module';\n\nimport { RegisterPage } from './register.page';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatSelectModule} from '@angular/material/select';\nimport {IonicStorageModule} from '@ionic/storage';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    IonicStorageModule,\n    RegisterPageRoutingModule,\n    MatCardModule,\n    MatButtonModule,\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    MatButtonModule,\n    MatInputModule,\n    MatSelectModule\n  ],\n  declarations: [RegisterPage]\n})\nexport class RegisterPageModule {}\n","<div class=\"container-fluid d-flex ion-justify-content-center h-100\" style=\"overflow-y: scroll\">\n  <div class=\"row\" style=\"flex: 1 0 auto\">\n    <div class=\"m-auto card-dimensions\">\n      <mat-card class=\"mat-elevation-z0 h-100 ion-text-center pb-5\">\n        <div class=\"d-flex ion-justify-content-center\">\n          <img  src=\"../../../assets/logo.png\" alt=\"Easy Doc Logo\">\n          <h1 class=\"pl-2\">Welcome</h1>\n        </div>\n        <mat-card-content>\n          <form  [formGroup]=\"registerForm\" (ngSubmit)=\"register()\" class=\"single-line-container content-padding\">\n            <mat-form-field>\n              <input matInput formControlName=\"name\" placeholder=\"Full name\" type=\"text\" required >\n              <mat-error *ngIf=\"registerForm.get('name').hasError('required')\">\n                Name is <strong>required</strong>\n              </mat-error>\n            </mat-form-field>\n            <mat-form-field>\n              <input matInput placeholder=\"Email\" formControlName=\"email\" type=\"email\" required>\n              <mat-error *ngIf=\"registerForm.get('email').hasError('email') && !registerForm.get('email').hasError('required')\">\n                Please enter a valid email address\n              </mat-error>\n              <mat-error *ngIf=\"registerForm.get('email').hasError('required')\">\n                Email is <strong>required</strong>\n              </mat-error>\n            </mat-form-field>\n            <mat-form-field>\n              <input matInput placeholder=\"Set a password\" formControlName=\"password\" type=\"password\" required>\n              <mat-error *ngIf=\"registerForm.get('email').hasError('required')\">\n                Password is <strong>required</strong>\n              </mat-error>\n            </mat-form-field>\n            <mat-form-field>\n              <mat-label>Select your hospitals</mat-label>\n              <mat-select formControlName=\"hospitals\" multiple required>\n                <mat-option *ngFor=\"let hospital of hospitals\" [value]=\"hospital\">{{hospital}}</mat-option>\n              </mat-select>\n              <mat-error *ngIf=\"registerForm.get('hospitals').hasError('required')\">\n                Select <strong>at-least one</strong> hospital\n              </mat-error>\n            </mat-form-field>\n            <mat-form-field>\n              <mat-label>What is your speciality</mat-label>\n              <mat-select formControlName=\"speciality\" required>\n                <mat-option *ngFor=\"let speciality of specialities\" [value]=\"speciality\">\n                  {{speciality}}\n                </mat-option>\n              </mat-select>\n              <mat-error *ngIf=\"registerForm.get('speciality').hasError('required')\">\n                Speciality is <strong>required</strong>\n              </mat-error>\n            </mat-form-field>\n            <button mat-raised-button class=\"mt-4\" color=\"primary\" type=\"submit\">Register</button>\n            <p style=\"font-size: 14px\" class=\"mt-2\">\n              Already have an account? <a [routerLink]=\"['/login']\">Log in</a>\n            </p>\n          </form>\n        </mat-card-content>\n      </mat-card>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from '../../shared/services/auth.service';\nimport { Router } from '@angular/router';\nimport { Storage } from '@ionic/storage';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.page.html',\n  styleUrls: ['./register.page.scss'],\n})\nexport class RegisterPage implements OnInit {\n  constructor(private authService: AuthService, private router: Router, private storage: Storage) {}\n  registerForm = new FormGroup({\n    name: new FormControl('', [Validators.required]),\n    email: new FormControl('', [Validators.required, Validators.email]),\n    password: new FormControl('', [Validators.required, Validators.min(5)]),\n    hospitals: new FormControl([], [Validators.required]),\n    speciality: new FormControl('', [Validators.required]),\n  });\n  hospitals = ['Max', 'Dharamshila', 'Kailash', 'Metro'];\n  specialities = ['ENT', 'Dentist', 'Anaesthesia', 'Physician'];\n\n  ngOnInit() {}\n\n  async register() {\n    await this.storage.set('isRegistered', 'yes');\n    await this.storage.set('hospitals', this.registerForm.get('hospitals').value);\n    await this.storage.set('speciality', this.registerForm.get('speciality').value);\n    await this.storage.set('email', this.registerForm.get('email').value);\n    await this.storage.set('password', this.registerForm.get('password').value);\n    if (this.registerForm.valid) {\n      this.authService.register(this.registerForm.value).then((isRegistered) => {\n        if (isRegistered) {\n          const loginData = {\n            username: this.registerForm.value.email,\n            password: this.registerForm.value.password,\n          };\n          this.authService.login(loginData).then((result) => {\n            if (result) {\n              this.router.navigateByUrl('').then();\n            }\n          });\n        }\n      });\n    }\n  }\n}\n"]}